<div class="md-padding" layout="column">
    <div ng-controller="AutocompleteCtrl as ctrl" layout="column" ng-cloak>
        <md-toolbar>
            <div class="md-toolbar-tools">
                <h3>
                    <a href="https://material.angularjs.org/latest/demo/autocomplete" target="_blank">Autocomplete</a>
                </h3>
            </div>
        </md-toolbar>
        <md-content class="md-padding">
            <form ng-submit="$event.preventDefault()">
                <p>Use <code>md-autocomplete</code> to search for matches from local or remote data sources.</p>
                <md-autocomplete ng-disabled="ctrl.isDisabled"
                                 md-no-cache="ctrl.noCache"
                                 md-selected-item="ctrl.selectedItem"
                                 md-search-text-change="ctrl.searchTextChange(ctrl.searchText)"
                                 md-search-text="ctrl.searchText"
                                 md-selected-item-change="ctrl.selectedItemChange(item)"
                                 md-items="item in ctrl.querySearch(ctrl.searchText)"
                                 md-item-text="item.display"
                                 md-min-length="0"
                                 placeholder="What is your favorite US state?">
                    <md-item-template>
                        <span md-highlight-text="ctrl.searchText" md-highlight-flags="^i">{{item.display}}</span>
                    </md-item-template>
                    <md-not-found>
                        No states matching "{{ctrl.searchText}}" were found.
                        <a ng-click="ctrl.newState(ctrl.searchText)">Create a new one!</a>
                    </md-not-found>
                </md-autocomplete>
                <br />
                <md-checkbox ng-model="ctrl.simulateQuery">Simulate query for results?</md-checkbox>
                <md-checkbox ng-model="ctrl.noCache">Disable caching of queries?</md-checkbox>
                <md-checkbox ng-model="ctrl.isDisabled">Disable the input?</md-checkbox>

                <p>By default, <code>md-autocomplete</code> will cache results when performing a query.  After the initial call is performed, it will use the cached results to eliminate unnecessary server requests or lookup logic. This can be disabled above.</p>
            </form>
        </md-content>
    </div>

    <div ng-controller="ButtonCtrl" ng-cloak>
        <md-toolbar>
            <div class="md-toolbar-tools">
                <h3>
                    <a href="https://material.angularjs.org/latest/demo/button" target="_blank">Button</a>
                </h3>
            </div>
        </md-toolbar>
        <md-content class="md-padding">
            <section layout="row" layout-sm="column" layout-align="center center" layout-wrap>
                <md-button>{{title1}}</md-button>
                <md-button md-no-ink class="md-primary">Primary (md-noink)</md-button>
                <md-button ng-disabled="true" class="md-primary">Disabled</md-button>
                <md-button class="md-warn">{{title4}}</md-button>
                <div class="label">Flat</div>
            </section>

            <section layout="row" layout-sm="column" layout-align="center center" layout-wrap>
                <md-button class="md-raised">Button</md-button>
                <md-button class="md-raised md-primary">Primary</md-button>
                <md-button ng-disabled="true" class="md-raised md-primary">Disabled</md-button>
                <md-button class="md-raised md-warn">Warn</md-button>
                <div class="label">Raised</div>
            </section>

            <section layout="row" layout-sm="column" layout-align="center center" layout-wrap>
                <md-button class="md-fab" aria-label="Eat cake">
                    <md-icon md-svg-src="img/icons/cake.svg"></md-icon>
                </md-button>

                <md-button class="md-fab md-primary" aria-label="Use Android">
                    <md-icon md-svg-src="img/icons/android.svg"></md-icon>
                </md-button>

                <md-button class="md-fab" ng-disabled="true" aria-label="Comment">
                    <md-icon md-svg-src="img/icons/ic_comment_24px.svg"></md-icon>
                </md-button>

                <md-button class="md-fab md-primary md-hue-2" aria-label="Profile">
                    <md-icon md-svg-src="img/icons/ic_people_24px.svg"></md-icon>
                </md-button>

                <md-button class="md-fab md-mini" aria-label="Eat cake">
                    <md-icon md-svg-src="img/icons/cake.svg"></md-icon>
                </md-button>

                <md-button class="md-fab md-mini md-primary" aria-label="Use Android">
                    <md-icon md-svg-src="img/icons/android.svg" style="color: greenyellow;"></md-icon>
                </md-button>
                <div class="label">FAB</div>
            </section>

            <section layout="row" layout-sm="column" layout-align="center center" layout-wrap>
                <md-button ng-href="{{googleUrl}}" target="_blank">Default Link</md-button>
                <md-button class="md-primary" ng-href="{{googleUrl}}" target="_blank">Primary Link</md-button>

                <md-button>Default Button</md-button>
                <div class="label">Link vs. Button</div>
            </section>

            <section layout="row" layout-sm="column" layout-align="center center" layout-wrap>
                <md-button class="md-primary md-hue-1">Primary Hue 1</md-button>
                <md-button class="md-warn md-raised md-hue-2">Warn Hue 2</md-button>
                <md-button class="md-accent">Accent</md-button>
                <md-button class="md-accent md-raised md-hue-1">Accent Hue 1</md-button>
                <div class="label">Themed</div>
            </section>

            <section layout="row" layout-sm="column" layout-align="center center" layout-wrap>
                <md-button class="md-icon-button md-primary" aria-label="Settings">
                    <md-icon md-svg-icon="img/icons/menu.svg"></md-icon>
                </md-button>
                <md-button class="md-icon-button md-accent" aria-label="Favorite">
                    <md-icon md-svg-icon="img/icons/favorite.svg"></md-icon>
                </md-button>
                <md-button class="md-icon-button" aria-label="More">
                    <md-icon md-svg-icon="img/icons/more_vert.svg"></md-icon>
                </md-button>
                <md-button href="http://google.com"
                           title="Launch Google.com in new window"
                           target="_blank"
                           ng-disabled="true"
                           aria-label="Google.com"
                           class="md-icon-button launch">
                    <md-icon md-svg-icon="img/icons/launch.svg"></md-icon>
                </md-button>
                <div class="label">Icon Button</div>
            </section>
        </md-content>
    </div>

    <div ng-controller="CheckBoxCtrl">
        <md-toolbar>
            <div class="md-toolbar-tools">
                <h3>
                    <a href="https://material.angularjs.org/latest/demo/checkbox" target="_blank">Checkbox</a>
                </h3>
            </div>
        </md-toolbar>

        <md-content class="md-padding">
            <div layout="row" layout-wrap>
                <div flex="100" layout="column">
                    <div>
                        <!--
                          In IE, we cannot apply flex directly to <fieldset>
                          see https://github.com/philipwalton/flexbugs#9-some-html-elements-cant-be-flex-containers
                        -->
                        <fieldset class="demo-fieldset">
                            <legend class="demo-legend">Using &lt;md-checkbox&gt; with the 'indeterminate' attribute </legend>
                            <div layout="row" layout-wrap flex>
                                <div flex-xs flex="50">
                                    <md-checkbox aria-label="Select All"
                                                 ng-checked="isChecked()"
                                                 md-indeterminate="isIndeterminate()"
                                                 ng-click="toggleAll()">
                                        <span ng-if="isChecked()">Un-</span>Select All
                                    </md-checkbox>
                                </div>
                                <div class="demo-select-all-checkboxes" flex="100" ng-repeat="item in items">
                                    <md-checkbox ng-checked="exists(item, selected)" ng-click="toggle(item, selected)">
                                        {{ item }}
                                    </md-checkbox>
                                </div>
                            </div>
                        </fieldset>
                    </div>
                </div>
            </div>
        </md-content>
    </div>
</div>

    @section scripts{
        <script>
            (function () {
                'use strict';
                app.controller('AutocompleteCtrl', AutocompleteCtrl);
                app.controller('ButtonCtrl', function ($scope) {
                    $scope.title1 = 'Button';
                    $scope.title4 = 'Warn';
                    $scope.isDisabled = true;

                    $scope.googleUrl = 'http://google.com';
                });
                app.controller('CheckBoxCtrl', function ($scope) {
                    $scope.items = [1, 2, 3, 4, 5];
                    $scope.selected = [1];
                    $scope.toggle = function (item, list) {
                        var idx = list.indexOf(item);
                        if (idx > -1) {
                            list.splice(idx, 1);
                        }
                        else {
                            list.push(item);
                        }
                    };

                    $scope.exists = function (item, list) {
                        return list.indexOf(item) > -1;
                    };

                    $scope.isIndeterminate = function () {
                        return ($scope.selected.length !== 0 &&
                            $scope.selected.length !== $scope.items.length);
                    };

                    $scope.isChecked = function () {
                        return $scope.selected.length === $scope.items.length;
                    };

                    $scope.toggleAll = function () {
                        if ($scope.selected.length === $scope.items.length) {
                            $scope.selected = [];
                        } else if ($scope.selected.length === 0 || $scope.selected.length > 0) {
                            $scope.selected = $scope.items.slice(0);
                        }
                    };
                });

                function AutocompleteCtrl($timeout, $q, $log) {
                    var self = this;

                    self.simulateQuery = false;
                    self.isDisabled = false;

                    // list of `state` value/display objects
                    self.states = loadAll();
                    self.querySearch = querySearch;
                    self.selectedItemChange = selectedItemChange;
                    self.searchTextChange = searchTextChange;

                    self.newState = newState;

                    function newState(state) {
                        alert("Sorry! You'll need to create a Constitution for " + state + " first!");
                    }

                    // ******************************
                    // Internal methods
                    // ******************************

                    /**
                     * Search for states... use $timeout to simulate
                     * remote dataservice call.
                     */
                    function querySearch(query) {
                        var results = query ? self.states.filter(createFilterFor(query)) : self.states,
                            deferred;
                        if (self.simulateQuery) {
                            deferred = $q.defer();
                            $timeout(function () { deferred.resolve(results); }, Math.random() * 1000, false);
                            return deferred.promise;
                        } else {
                            return results;
                        }
                    }

                    function searchTextChange(text) {
                        $log.info('Text changed to ' + text);
                    }

                    function selectedItemChange(item) {
                        $log.info('Item changed to ' + JSON.stringify(item));
                    }

                    /**
                     * Build `states` list of key/value pairs
                     */
                    function loadAll() {
                        var allStates = 'Alabama, Alaska, Arizona, Arkansas, California, Colorado, Connecticut, Delaware,\
              Florida, Georgia, Hawaii, Idaho, Illinois, Indiana, Iowa, Kansas, Kentucky, Louisiana,\
              Maine, Maryland, Massachusetts, Michigan, Minnesota, Mississippi, Missouri, Montana,\
              Nebraska, Nevada, New Hampshire, New Jersey, New Mexico, New York, North Carolina,\
              North Dakota, Ohio, Oklahoma, Oregon, Pennsylvania, Rhode Island, South Carolina,\
              South Dakota, Tennessee, Texas, Utah, Vermont, Virginia, Washington, West Virginia,\
              Wisconsin, Wyoming';

                        return allStates.split(/, +/g).map(function (state) {
                            return {
                                value: state.toLowerCase(),
                                display: state
                            };
                        });
                    }

                    /**
                     * Create filter function for a query string
                     */
                    function createFilterFor(query) {
                        var lowercaseQuery = angular.lowercase(query);

                        return function filterFn(state) {
                            return (state.value.indexOf(lowercaseQuery) === 0);
                        };

                    }
                }
            })();
        </script>
    }
